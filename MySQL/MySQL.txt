NOTES :

show databases;
use Demo;
create database Demo;
create table book (bkid int,bookName varchar(20),price numeric(10,2), pages int);
alter table book add constraint PK_BKID Primary key (bkid);
insert into book values (1,'Alice in WonderLand',2000 , 5);
insert into book values (2,'Book1',1500 , 450);
insert into book values (4,'Book3',800 , 300);

select * from book;
//see the result.......
alter table book modify bookName varchar(30);
alter table book add constraint DF_Price Check (price >= 300);
insert into book values (5,'Book4', 200 , 200);  //ERROR
insert into book values (5,'Book4', 300 , 200);

Alter ------------------------------------------------------------------->
-To add column
-To drop column
-To modify column
-To add a constraints to column


Default Example---------------------------------------------------------->
-create table sample (id int, price numeric(10,2) DEFAULT 100, pname varchar(20) DEFAULT 'UnKnown');
-insert into sample values(1,5000.45,'Box');

-insert into sample(id,price) values(2,5000.45);
-insert into sample(id,pname) values(3,'Container');


foreign key-->
 create table department (did int primary key, dname varchar(20));
 insert into department values(1,'IT');
 insert into department values(2,'CSE');
 insert into department values(3,'ECE');
 insert into department values(4,'EEE');

 select * from department;
//see the result.......

// child employee table
  create table employee(sid int primary key,sname varchar(20),did int, constraint FK_STU_DID foreign key(did) references department(did)); 
 ---alternate for above---
 create table employee (eid int primary key, ename varchar(20),did int,constraint FK_DID foreign key(did) references department(did) on delete cascade);

 insert into employee  values (1,'Alice',1);
 insert into employee  values (2,'Bob',2);
 insert into employee  values (3,'Charles',3);
 insert into employee  values (4,'Ria',4);

 select * from employee;
//see the result.......

//child student table
  create table student (sid int primary key,sname varchar(20),did int, constraint FK_STU_DID foreign key(did) references department(did));

insert into student values (1,'Alice',1);
insert into student  values (2,'Bob',2);
insert into student values (3,'Charles',3);
insert into student  values (4,'Ria',4);
select * from student;
//see the result.......

 if we delete row from parent table(department table) then what happened with child table(student)
 ---> delete from department where did=4;
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`demo`.`student`, 
CONSTRAINT `FK_STU_DID` FOREIGN KEY (`did`) REFERENCES `department` (`did`))

--> delete from department where did=5;  //it allows bcoz it is not in child table
but for that we need to give cascade(like we give in emp table) so 
whatever operation we perform on parent table(department table) will 
reflect on child table(employee table);
-->delete from department where did=1;
-->it will also delete from employee;


//drop table student; --->for deleting the table.
//drop table employee;


for SET NULL-->

create table employee (eid int primary key, ename varchar(20),did int,constraint FK_DID foreign key(did) references department(did) on delete set null);
 insert into employee  values (1,'Alice',1);
 insert into employee  values (2,'Bob',2);
 insert into employee  values (3,'Charles',3);
 insert into employee  values (4,'Ria',4);


whatever we delete from parent table(dept table) at that place null should comes in child table(emp table).
--> delete from department where did=4;
--> select * from employee;
//see the result.......
drop table employee;

for default -->
create table employee (eid int primary key, ename varchar(20),did int default 1,constraint FK_DID foreign key(did) references department(did) on delete set default);
 insert into employee  values (1,'Alice',1);
 insert into employee  values (2,'Bob',2);
 insert into employee  values (3,'Charles',3);
whatever we delete from parent table(dept table) at that place default value should comes in child table(emp table).
--> delete from department where did=4;
--> select * from employee;
//see the result.......
drop table employee;


for update-->
create table employee (eid int primary key, ename varchar(20),did int default 1,constraint FK_DID foreign key(did) references department(did) on delete set null on update cascade);
 insert into employee  values (1,'Alice',1);
 insert into employee  values (2,'Bob',2);
 insert into employee  values (3,'Charles',3);
whatever we update from parent table(dept table) at that place updated value should comes in child table(emp table).
--> update department set did=11 where did=1;
--> select * from department;
--> select * from employee;
//see the result.......
drop table employee;


     -|----------------------------------------------------------|-
      |          mcq1,mcq2,                                      |
      |          code marathon-->                                |
      |          creating and inserting tables                   |
      |          join, subquery, procedures and functions        |
      |          indexes                                         |
     -|----------------------------------------------------------|-













joins------->


GITHUB ------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>
https://github.com/sajithatrainer/SQL-Script/blob/main/createHRDB
-------------------------------------------------------------------


use HRDB;
select * from employees;
select * from regions join countries on
regions.region_id = countries.region_id;

select * from countries join regions on
regions.region_id = countries.region_id;

/* display the country names along with their name-->*/
select country_name, region_name from countries c join regions r on r.region_id = c.region_id;



-->display employees first name, last name, department name-->
select * from employees;
select * from departments;
select first_name,last_name, department_name from employees e join departments d on e.department_id = d.department_id;


--> display employees first name,last name,department name for employees from IT department-->
select * from employees;
select * from departments;
select first_name,last_name, department_name from employees e join departments d on e.department_id = d.department_id where d.department_name='IT';


--> display employees first name,last name,salary , department name for employees who get salary greater than 10,000-->
select * from employees;
select * from departments;
select first_name,last_name, salary, department_name from employees e join departments d on e.department_id = d.department_id where e.salary > 10000;


-->display total number of employees who get salary greater than 10,000 -->
select count(*) from employees where salary > 10000;


-->display employee first name, dept name, city , country and region using joins-->
select * from departments;
select * from locations;
select * from country;
select * from region;
select first_name,department_name,city,country_name,region_name from employees e 
join departments d on e.department_id = d.department_id 
join locations l on d.location_id = l.location_id
join countries c on l.country_id = c.country_id
join regions r on c.region_id = r.region_id;


-->display employee first name, dept name, city , city for employees from departments finence and sales using joins -->
select * from departments;
select first_name,department_name,city from departments d 
join employees e on d.department_id = e.department_id
join locations l on d.location_id = l.location_id
where d.department_name = 'Sales' OR d.department_name = 'Finance';






Joins  ------------------> (Inner,left,right,self)

use demo;
select * from department;
select * from employee;

Inner -->
select e.ename, d.did , d.dname from employee e 
inner join department d 
on e.did=d.did;

left outer join ------>
select e.ename, d.did , d.dname from employee e 
left join department d 
on e.did=d.did;


right join-------->
select e.ename, d.did , d.dname from employee e 
right join department d 
on e.did=d.did;


SElF join-->
-->display the employee first_name along with the manager first_name,manager last_name--->
use HRDB;
select * from employees;
select e.first_name, e.employee_id, m.first_name, m.last_name from employees e
join employees m where e.employee_id = m.manager_id;
-----------------------------------------------------------------------------------------------------------------


SubQuery --->
-->Display the first name, salary from the enmployee who gets the higher salary-->
use HRDB;
select first_name,salary from employees where salary = (select max(salary) from employees);


-->display first name and dept name for employee who have greater then avg salary-->
select first_name, d.department_name from employees e
join departments d on e.department_id = d.department_id 
where salary  > (select avg(salary) from employees);


-->display first name and dept name for employee who have greater then avg salary from sales-->
select first_name, salary ,d.department_name from employees e
join departments d on e.department_id = d.department_id 
where salary  > (select avg(salary) from employees) AND d.department_name = 'Sales';



Group By--------------------------------------------------------------------->
-->Display the highest salary for employee group by city-->





-->print second max salary --->
select max(salary) from employees where salary < (select max(salary) from employees);

-->print top 5 emp who have highest salary -->
select first_name,salary from employees order by salary DESC limit 5;

-->






--------------------------------------------------------------------------------------------------------------------------
UDF - User defined functions
Built in functions--> max,min,avg..........
DPO - 
stored procedures - provide reusability = write once use it multiple times.



//Built-In functions;
use hrdb;

/*STRING --> */
select len(' Hello      ');        /*space before characters will be considered....not afetr characters*/
select len(trim('  Hello'));       /* remove extra spaces*/
select SUBSTRING('Welcome',2,3);
select Upper(first_name),last_name from employees;
select concat(first_name,'.',last_name) as Full_name from employees;  /*It can take 54 arguments*/
/* explore other functions  --> https://learn.microsoft.com/en-us/sql/t-sql/functions/len-transact-sql?view=sql-server-ver16  */

/*MATHEMATICAL --> */
Select (salary+(salary * 0.13)) as Increamented_Salary from employees;
Select Round((salary+(salary * 0.13)),2) Increamented_Salary from employees;
select round(1234.56789,2);
select CEILING(1234.5678);
select Ceiling($123.45);

/*DATE AND TIME --> */
select DATEDIFF(year,'2008-10-01', getDate()) as 'Age';

select first_name ,datediff(year,hire_date,getDate()) as 'Years of Experince' from employees;
select * from employees;

select DATEADD(day,7,getDate()) 'Date_Of_Return';  /*It adds 7 days in today's date*/

select DATEPART(week, '2007-01-3'), DATEPART(weekday,'2023-10-11');


use hrdb;

select first_name,email,phone_number,salary,hire_date into employee_details from employees;
alter table employee_details alter column email varchar(40) null;

update employee_details set email=null where first_name='Shelley';
update employee_details set email=null where first_name='william';

select ISNULL(email,phone_number) 'Address' from employee_details;
select Coalesce(email,phone_number,'Not Found') 'Address' from employee_details;




select cast('1233' as int);     /*convert string into int*/
select round('222.3567',2);
select cast('2034-10-12' as DateTime);
select cast('2034-10-12' as DateTime);

select CONVERT(varchar,GETDATE(),102) as dateconvert;

select TRY_ConVert(DateTime ,'2020/10/12',101) result;
select TRY_PARSE('34 April 2020' as Date) result;
select TRY_PARSE('-124566' as int);




-------------------------------------------------------------------------------------------------------
























